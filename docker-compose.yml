version: "3.9"

services:     
  
  fastapi:
    container_name: "fastapi-container"        
    image: "jrtec/fastapi-chat-backend"
    command: "uvicorn main:app --reload --workers 1 --host 0.0.0.0 --port 8000"
    volumes:
      - ./backend:/code
    expose:
      - "8000"
    # ports:
    #   - "8180:8000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.fastapi_local.entrypoints=web"
      - "traefik.http.routers.fastapi_local.rule=Host(`${LOCAL_1}`, `${LOCAL_2}`, `${EXT_ENDPOINT1}`, `${EXT_ENDPOINT2}`, `${EXT_ENDPOINT3}`)"
      - "traefik.http.services.fastapi_localservice.loadbalancer.server.port=8000"      
    mem_limit: 512m

  # datadog:
  #   image: datadog/agent
  #   container_name: "datadog-agent-fastapi-container"
  #   expose:  # new
  #     - 8125
  #     - 8126    
  #   volumes:
  #    - /var/run/docker.sock:/var/run/docker.sock
  #    - /proc/:/host/proc/:ro
  #    - /sys/fs/cgroup:/host/sys/fs/cgroup:ro
  #    - /var/lib/docker/containers:/var/lib/docker/containers:ro    
  #   depends_on:
  #     - fastapi
  #   environment:
  #     - DD_API_KEY=${DD_API_KEY}
  #     - DD_SITE=datadoghq.com
  #     - DD_LOGS_ENABLED=true
  #     - DD_LOGS_CONFIG_DOCKER_CONTAINER_USE_FILE=true # To read log from file instead of the docker socket    

  # sonarqube:
  #   container_name: "sonarqube-container-fast"        
  #   image: "sonarqube:8.9.3-community"
  #   volumes:
  #     - ./sonarqube/extensions:/opt/sonarqube/extensions
  #     - ./sonarqube/logs:/opt/sonarqube/logs
  #     - ./sonarqube/data:/opt/sonarqube/data
  #   expose:
  #     - "9000"
  #   # ports:
  #   #   - "9000:9000"
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.sonarqube.entrypoints=web"
  #     - "traefik.http.routers.sonarqube.rule=Host(`sonar.${LOCAL_1}`, `sonar.${LOCAL_2}`, `sonar.${EXT_ENDPOINT1}`, `sonar.${EXT_ENDPOINT2}`, `sonar.${EXT_ENDPOINT3}`)"
  #     - traefik.http.services.sonarqube_service.loadbalancer.server.port=9000

  traefik-proxy:
    image: "traefik:latest"
    container_name: "traefik-proxy"
    restart: always
    command:
      - "--providers.docker=true"
    expose:
      - "80"
    #ports:
      # - "80:80"
    depends_on:      
      - fastapi
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik/traefik.yml:/traefik.yml:ro"
      - "./traefik/.htpasswd:/.htpasswd"      
      - "${EB_LOG_BASE_DIR:-./traefik}/traefik-proxy:/logs"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${LOCAL_1}`, `traefik.${LOCAL_2}`,`traefik.${EXT_ENDPOINT1}`, `traefik.${EXT_ENDPOINT2}`, `traefik.${EXT_ENDPOINT3}`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.usersfile=/.htpasswd"

  nginx:
    container_name: nginx
    restart: unless-stopped
    image: "nginx:latest"
    ports:
      - "80:8080"
    volumes:
      - ./static:/code/static
      - ./nginx-config-files/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx-config-files/app.nginx.template:/etc/nginx/templates/app.nginx.template
      - "${EB_LOG_BASE_DIR:-./nginx-config-files}/nginx-proxy:/var/log/nginx"
    depends_on:
      - fastapi
    mem_limit: 80m